#!/usr/bin/python
#+
# Test of my ass8 PDP-8 code-generation library: output a simple string to
# the teletype.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
from crosscode8 import \
	CodeBuffer, \
	i, \
	op, \
	dump_rim, \
	dump_simh

rim_output = False # true for RIM-format output, False for sequence of SIMH commands

c = CodeBuffer()

index = c.label("index").resolve(010) # index reg
start = c.label("start") # program entry point
thestr = c.label("thestr") # string to output
ptr = c.label("ptr").resolve(020) # pointer to string to output
c.d(ptr, thestr)

# program code
c.psect("code").org(0200)
start.resolve()
c.oi(i.CLA).mi(op.TAD, 0, ptr) # AC := ptr
c.oi(i.CIA).oi(i.CMA) # AC := AC - 1
c.mi(op.DCA, 0, index) # initialize index for preincrement use
loop = c.label("loop").resolve()
done = c.label("done")
c.oi(i.CLA).mi(op.TAD, 1, index) # AC := @++index
c.oi(i.SNA).mi(op.JMP, 0, done) # finished on hitting terminating nul
c.oi(i.TLS) # output char
out = c.label("out").resolve()
c.oi(i.TSF).mi(op.JMP, 0, out) # wait done
c.mi(op.JMP, 0, loop) # back for next
done.resolve()
c.oi(i.HLT)

# data
c.psect("data").org(0300)
thestr.resolve()
c.ws("THE QUICK BROWN FOX\n\0")

c.start(start)
(dump_simh, dump_rim)[rim_output](c.done(), sys.stdout)
