#!/usr/bin/python
#+
# Test of my crosscode8 PDP-8 code-generation library -- generate the standard RIM loader.
# This is loaded into a standard location at the top of memory, and when run it
# loads a program from paper tape.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
from crosscode8 import \
	CodeBuffer, \
	i, \
	op, \
	dump_simh

c = CodeBuffer()
start = 07756
c.org(start)
l1 = c.label("l1").resolve()
c.oi(i.KCC) # ready to start reading
l2 = c.label("l2").resolve()
c.oi(i.KSF).mi(op.JMP, 0, l2) # wait until next input byte ready
c.oi(i.KRB) # read it
c.oi(i.CLL | i.RTL).oi(i.RTL) # move to top of AC
c.oi(i.SPA).mi(op.JMP, 0, l2) # top bit set => leader/trailer => ignore
c.oi(i.RTL) # L := second-to-top bit, rest into high 6 bits of AC, L = 1 => high part of address
l3 = c.label("l3").resolve()
c.oi(i.KSF).mi(op.JMP, 0, l3) # wait until next input byte ready
c.oi(i.KRS) # read low 6 bits of AC (top 2 bits of this byte assumed zero)
c.oi(i.SNL)
temp = c.label("temp")
c.mi(op.DCA, 1, temp) # L = 0 => just read a value for last address
c.mi(op.DCA, 0, temp) # L != 0 => just read an address
  # (also executed when L = 0, but address stored is expected to be overwritten by
  # real address following)
c.mi(op.JMP, 0, l1) # get the next one
c.resolve(temp)
c.w(0)
c.w(0) # entry point to BIN loader will be inserted here
c.start(start)
c.done()
dump_simh(c, sys.stdout)
